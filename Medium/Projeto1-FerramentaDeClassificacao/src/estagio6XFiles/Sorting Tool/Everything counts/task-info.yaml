type: edu
custom_name: stage4
files:
- name: src/sorting/Main.java
  visible: true
  text: "package sorting;\n\nimport java.util.*;\n\n/**\n * Adicionar comportamento\
    \ para tipos de dados de texto.\n * Implementar análise de argumentos de linha\
    \ de comando.\n * para o usuário definir o tipo de dados de entrada.\n * Depois\
    \ de analisar os argumentos e ler a entrada, tratar a entrada de acordo\n * com\
    \ o tipo de dados e enviar uma mensagem de informação.\n */\npublic class Main\
    \ {\n    public static void main(final String[] args) {\n        Scanner scanner\
    \ = new Scanner(System.in);\n        ArrayList<Long> listLong;\n        ArrayList<String>\
    \ listString;\n\n        if (args != null) {\n            if (args[0].equals(\"\
    -sortIntegers\")) { // args[1].equals(\"-sortIntegers\")\n                listLong\
    \ = (ArrayList<Long>) scannerAddList(scanner, true, false);\n                sortIntegers(listLong);\n\
    \                return;\n            }else\n            if (args[1].equals(\"\
    long\")) {\n                listLong = (ArrayList<Long>) scannerAddList(scanner,\
    \ true, false);\n                if (args.length == 3) { // args[1].equals(\"\
    -sortIntegers\")\n                    sortIntegers(listLong);\n              \
    \      return;\n                }\n\n                System.out.printf(\"Total\
    \ numbers: %d.\\n\", listLong.size());\n                System.out.printf(\n \
    \                       \"the greatest number: %d (%d time(s), %d%%).\\n\",\n\
    \                        Collections.max(listLong),\n                        Collections.frequency(listLong,\
    \ Collections.max(listLong)),\n                        100 * Collections.frequency(\n\
    \                                listLong,\n                                Collections.max(listLong)\n\
    \                        ) / listLong.size()\n                );\n           \
    \ } else  if (args[1].equals(\"line\")) {\n                listString = (ArrayList<String>)\
    \ scannerAddList(scanner, false, false);\n\n                System.out.printf(\"\
    Total lines: %d.\\n\", listString.size());\n                int indiceMaior =\
    \ checkMax(listString);\n\n                System.out.printf(\n              \
    \          \"The longest line:\\n\" +\n                                \"%s\\\
    n\" +\n                                \"(%d time(s), %d%%).\\n\",\n         \
    \               listString.get(indiceMaior),\n                        Collections.frequency(listString,\
    \ listString.get(indiceMaior)),\n                        100 * Collections.frequency(\n\
    \                                listString,\n                               \
    \ listString.get(indiceMaior)\n                        ) / listString.size()\n\
    \                );\n            } else  if (args[1].equals(\"word\")) {\n   \
    \             listString = (ArrayList<String>) scannerAddList(scanner, false,\
    \ true);\n\n                if (args.length == 3) {\n                    listLong\
    \ = new ArrayList<>();\n                    for (int i = 0; i < listString.size();\
    \ i++){\n                        listLong.add(Long.parseLong(listString.get(i)));\n\
    \                    }\n                    sortIntegers(listLong);\n        \
    \            return;\n                }\n\n                System.out.printf(\"\
    Total words: %d.\\n\", listString.size());\n                int indiceMaior =\
    \ checkMax(listString);\n\n                System.out.printf(\n              \
    \          \"The longest word: %s (%d time(s), %d%%).\\n\",\n                \
    \        listString.get(indiceMaior),\n                        Collections.frequency(listString,\
    \ listString.get(indiceMaior)),\n                        100 * Collections.frequency(\n\
    \                                listString,\n                               \
    \ listString.get(indiceMaior)\n                        ) / listString.size()\n\
    \                );\n            }\n        } else { // é word\n            listString\
    \ = (ArrayList<String>) scannerAddList(scanner, false, true);\n            System.out.printf(\"\
    Total words: %d.\\n\", listString.size());\n            int indiceMaior = checkMax(listString);\n\
    \n            System.out.printf(\n                    \"The longest word: %s (%d\
    \ time(s), %d%%).\\n\",\n                    listString.get(indiceMaior),\n  \
    \                  Collections.frequency(listString, listString.get(indiceMaior)),\n\
    \                    100 * Collections.frequency(\n                          \
    \  listString,\n                            listString.get(indiceMaior)\n    \
    \                ) / listString.size()\n            );\n        }\n    }\n   \
    \ \n    public static ArrayList<?> scannerAddList(\n            Scanner scanner,\
    \ boolean isLong, boolean isWord\n    ) {\n        if (isLong) {\n           \
    \ ArrayList<Long> listLong = new ArrayList<>();\n            while (scanner.hasNextLong())\
    \ {\n                long number = scanner.nextLong();\n\n                listLong.add(number);\n\
    \            }\n            return listLong;\n        } else {\n            ArrayList<String>\
    \ listString = new ArrayList<>();\n            \n            if (isWord) {\n \
    \               while (scanner.hasNext()) {\n                    String str =\
    \ scanner.next();\n                    listString.add(str);\n                }\n\
    \            } else {\n                while (scanner.hasNextLine()) {\n     \
    \               String str = scanner.nextLine();\n                    listString.add(str);\n\
    \                }\n            }\n            return listString;\n        }\n\
    \    }\n\n    public static int checkMax(ArrayList<String> listString) {\n   \
    \     int maior = 0;\n        int indiceMaior = 0;\n\n        for (int i = 0;\
    \ i < listString.size(); i++) {\n            if (listString.get(i).length() >\
    \ maior) {\n                maior = listString.get(i).length();\n            \
    \    indiceMaior = i;\n            }\n        }\n        return indiceMaior;\n\
    \    }\n\n    public static void sortIntegers(ArrayList<Long> listLong) {\n  \
    \      Collections.sort(listLong);\n        System.out.println(\"Total number\
    \ = \" + listLong.size() + \".\");\n        System.out.println(\n            \
    \    \"Sorted data: \" +\n                        listLong.toString().\n     \
    \                           replace(\"[\", \"\").\n                          \
    \      replace(\",\", \"\").\n                                replace(\"]\", \"\
    \")\n        );\n    }\n}"
  learner_created: false
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/242/implement#comment
status: Solved
record: 3
