type: edu
custom_name: Error!
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);
            ArrayList<Long> listLong;
            ArrayList<String> listString;
            boolean sortingType = false;
            boolean natural = true;
            boolean byCount = false;
            String dataType = "";


            for (String str : args) {
                if (str.equals("-sortingType")) {
                    sortingType = true;
                } else if (str.equals("byCount")) {
                    natural = false;
                    byCount = true;
                } else if (str.equals("long")) {
                    dataType = str;
                }else if (str.equals("line")) {
                    dataType = str;
                }else if (str.equals("word")) {
                    dataType = str;
                }
            }

            if (sortingType) { // args[1].equals("-sortingType")
                //listLong = (ArrayList<Long>) scannerAddList(scanner, true, false);
                if (dataType.equals("long")) {
                    listLong = (ArrayList<Long>) scannerAddList(scanner, true, false);

                    if (natural || (!natural && !byCount)){
                        sortingLong(listLong, true);
                    } else if (byCount) {
                        sortingLong(listLong, false);
                    }
                } else if (dataType.equals("line")) {
                    listString = (ArrayList<String>) scannerAddList(scanner, false, false);

                    if (natural || (!natural && !byCount)){
                        sortingString(listString, true, false);
                    } else if (byCount) {
                        sortingString(listString, false, false);
                    }
                } else if (dataType.equals("word")) {
                    listString = (ArrayList<String>) scannerAddList(scanner, false, true);

                    if (natural || (!natural && !byCount)){
                        sortingString(listString, true, true);
                    } else if (byCount) {
                        sortingString(listString, false, true);
                    }
                }

            } else { // natural
                if (dataType.equals("long")) {
                    listLong = (ArrayList<Long>) scannerAddList(scanner, true, false);
                        sortingLong(listLong, true);
                } else if (dataType.equals("line")) {
                    listString = (ArrayList<String>) scannerAddList(scanner, false, false);

                        sortingString(listString, true, false);

                } else if (dataType.equals("word")) {
                    listString = (ArrayList<String>) scannerAddList(scanner, false, true);

                    sortingString(listString, true, true);

                }

            }
        }

        public static ArrayList<?> scannerAddList(
                Scanner scanner, boolean isLong, boolean isWord
        ) {
            if (isLong) {
                ArrayList<Long> listLong = new ArrayList<>();

                while (scanner.hasNextLong()) {
                    long number = scanner.nextLong();

                    listLong.add(number);
                }

                return listLong;
            } else {
                ArrayList<String> listString = new ArrayList<>();

                if (isWord) {
                    while (scanner.hasNext()) {
                        String str = scanner.next();
                        listString.add(str);
                    }
                } else {
                    while (scanner.hasNextLine()) {
                        String str = scanner.nextLine();
                        listString.add(str);
                    }
                }
                return listString;
            }
        }


        public static void sortingLong(ArrayList<Long> listLong, boolean natural) {
                if (natural) {
                    Collections.sort(listLong);

                    System.out.println("Total number = " + listLong.size() + ".");
                    System.out.println(
                            "Sorted data: " +
                                    listLong.toString().
                                            replace("[", "").
                                            replace(",", "").
                                            replace("]", "")
                    );
                } else {
                    // byCount (por quantidade de vezes, da maior qtd para a menor qtd
                    // ou por ordem natural)

                    // Ordena e remove os repetidos
                    Set<ByCountOrderLong> byCountOrderLongs = new TreeSet<>();
                    ByCountOrderLong[] byCount = new ByCountOrderLong[listLong.size()];

                    for (int i = 0; i < listLong.size(); i++) {
                        byCount[i] = new ByCountOrderLong(
                                Collections.frequency(listLong, listLong.get(i)),
                                listLong.get(i),
                                listLong.size()
                        );
                        byCountOrderLongs.add(byCount[i]);
                    }

                    System.out.println(
                            "Total numbers: " + listLong.size() + ".\n" +
                                    byCountOrderLongs.toString().replace("[", "")
                                            .replace(", ", "")
                                            .replace("¬ ", ", ")
                                            .replace("]", "")
                    );
                }
            }


        public static void sortingString(ArrayList<String> listString, boolean natural, boolean isWord) {
            if (!isWord){
                if (natural) { //ordenação lexicográfica
                    //SortedSet<String> sortedSet = new TreeSet<>();
                    Collections.sort(listString);



                    System.out.println(
                            "Total lines: " + listString.size() + "\n" +
                                    "Sorted data:\n" +
                                    listString.toString()
                                            .replace("[", "")
                                            .replace(", ", "\n")
                                            .replace("]", "")
                    );
                } else { // byCount
                    ByCountOrderString[] byCountOrderStrings = new ByCountOrderString[listString.size()];
                    Set<ByCountOrderString> set = new TreeSet<>();

                    for (int i = 0; i < listString.size(); i++) {
                        byCountOrderStrings[i] = new ByCountOrderString(
                                Collections.frequency(listString, listString.get(i)),
                                listString.get(i),
                                listString.size()
                        );

                        set.add(byCountOrderStrings[i]);
                    }

                    System.out.println(
                            "Total lines: " + listString.size() + ".\n" +
                            set.toString()
                                    .replace("[", "")
                                    .replace(", ", "")
                                    .replace("¬ ", ", ")
                                    .replace("]", "")
                    );
                }
            } else { // word
                if (natural) { //ordenação lexicográfica
                    //Set<String> sortedSet = new TreeSet<>();
                    Collections.sort(listString);

                    System.out.println(
                            "Total words: " + listString.size() + "\n" +
                                    "Sorted data:\n" +
                                    listString.toString()
                                            .replace("[", "")
                                            .replace(", ", " ")
                                            .replace("]", "")
                    );
                } else { // byCount
                    ByCountOrderString[] byCountOrderStrings = new ByCountOrderString[listString.size()];
                    Set<ByCountOrderString> set = new TreeSet<>();

                    for (int i = 0; i < listString.size(); i++) {
                        byCountOrderStrings[i] = new ByCountOrderString(
                                Collections.frequency(listString, listString.get(i)),
                                listString.get(i),
                                listString.size()
                        );

                        set.add(byCountOrderStrings[i]);
                    }


                    System.out.println(
                            "Total words: " + listString.size() + ".\n" +
                                    set.toString()
                                    .replace("[", "")
                                    .replace(", ", "")
                                    .replace("¬ ", ", ")
                                    .replace("]", "")
                    );
                }
            }
        }
    }



    /**
     * Ordenação por quantidade de vezes de uma string ou lexicograficamente
     */
    class ByCountOrderString implements Comparable<ByCountOrderString>{
        private int qtdStr;
        private int total;
        private String str;

        public ByCountOrderString(int qtdStr, String str, int total) {
            this.qtdStr = qtdStr;
            this.str = str;
            this.total = total;
        }

        public int getQtdStr() {
            return qtdStr;
        }

        public String getStr() {
            return str;
        }

        @Override
        public String toString() {
            return getStr() + ": " + getQtdStr() + " time(s)¬ " + (int)Math.round(100 * (double)qtdStr /  total)+ "%\n";

        }

        @Override
        public int compareTo(ByCountOrderString other) {
            int ret = Integer.valueOf(getQtdStr()).compareTo(other.getQtdStr());
            return ret == 0 ? String.valueOf(getStr()).compareTo(other.getStr()) :
                ret;
        }
    }



    class ByCountOrderLong implements Comparable<ByCountOrderLong> {
        private long total;
        private long vezes;
        private long valor;

        public ByCountOrderLong(long vezes, long valor, long total) {
            this.vezes = vezes;
            this.valor = valor;
            this.total = total;
        }

        public long getVezes() {
            return vezes;
        }

        public long getValor() {
            return valor;
        }

        @Override
        public String toString() {
            return getValor() + ": " + getVezes() + " time(s)¬ " + (int)Math.round(100 * (double)vezes /  total)+ "%\n";
        }


        /**
         * Ordena por quantidade de vezes
         * Se a quantidade de vezes for igual, ordena por valor
         * @param other
         * @return
         */
        @Override
        public int compareTo(ByCountOrderLong other) {
            int ret = Long.valueOf(getVezes()).compareTo(other.getVezes());
            return ret == 0
                    ? Long.valueOf(getValor()).compareTo(other.getValor())
                    : ret;
        }
    }
  learner_created: false
- name: test/common/SortingToolStage5Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage5Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }


    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }

  learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/243/implement#comment
status: Solved
record: 4
