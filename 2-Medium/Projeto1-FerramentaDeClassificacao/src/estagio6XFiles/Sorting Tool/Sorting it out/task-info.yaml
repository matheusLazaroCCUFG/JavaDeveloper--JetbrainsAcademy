type: edu
custom_name: stage3
files:
- name: src/sorting/Main.java
  visible: true
  text: "package sorting;\n\nimport java.util.*;\n\n/**\n * Adicionar comportamento\
    \ para tipos de dados de texto.\n * Implementar análise de argumentos de linha\
    \ de comando.\n    * para o usuário definir o tipo de dados de entrada.\n * Depois\
    \ de analisar os argumentos e ler a entrada, tratar a entrada de acordo\n * com\
    \ o tipo de dados e enviar uma mensagem de informação.\n */\npublic class Main\
    \ {\n    public static void main(final String[] args) {\n        Scanner scanner\
    \ = new Scanner(System.in);\n        ArrayList<Long> listLong = null;\n      \
    \  ArrayList<String> listLines = null;\n        ArrayList<String> listWords =\
    \ null;\n\n        if (args != null) {\n            if (args[1].equals(\"long\"\
    )) {\n                listLong = new ArrayList<>();\n\n                while (scanner.hasNextLong())\
    \ {\n                    long number = scanner.nextLong();\n\n               \
    \     listLong.add(number);\n                }\n            } else  if (args[1].equals(\"\
    line\")) {\n                listLines = new ArrayList<>();\n\n               \
    \ while (scanner.hasNextLine()) {\n                    String str = scanner.nextLine();\n\
    \n                    listLines.add(str);\n                }\n            } else\
    \  if (args[1].equals(\"word\")) {\n                listWords = new ArrayList<>();\n\
    \n                while (scanner.hasNext()) {\n                    String word\
    \ = scanner.next();\n\n                    listWords.add(word);\n            \
    \    }\n            }\n        } else { // é word\n            listWords = new\
    \ ArrayList<>();\n\n            while (scanner.hasNext()) {\n                String\
    \ word = scanner.next();\n\n                listWords.add(word);\n           \
    \ }\n        }\n        \n        if(listLong != null) {\n            System.out.printf(\"\
    Total numbers: %d.\\n\", listLong.size());\n            System.out.printf(\n \
    \                   \"the greatest number: %d (%d time(s), %d%%).\\n\",\n    \
    \                Collections.max(listLong),\n                    Collections.frequency(listLong,\
    \ Collections.max(listLong)),\n                    100 * Collections.frequency(listLong,\
    \ Collections.max(listLong)) / listLong.size()\n            );\n        } else\
    \ if (listLines != null) {\n            System.out.printf(\"Total lines: %d.\\\
    n\", listLines.size());\n            int maior = 0;\n            int indiceMaior\
    \ = 0;\n\n            for (int i = 0; i < listLines.size(); i++) {\n         \
    \       if (listLines.get(i).length() > maior) {\n                    maior =\
    \ listLines.get(i).length();\n                    indiceMaior = i;\n         \
    \       }\n            }\n\n            System.out.printf(\n                 \
    \   \"The longest line:\\n\" +\n                    \"%s\\n\" +\n            \
    \        \"(%d time(s), %d%%).\\n\",\n                    listLines.get(indiceMaior),\n\
    \                    Collections.frequency(listLines, listLines.get(indiceMaior)),\n\
    \                    100 * Collections.frequency(listLines, listLines.get(indiceMaior))\
    \ / listLines.size()\n            );\n        } else if (listWords != null) {\n\
    \            System.out.printf(\"Total words: %d.\\n\", listWords.size());\n \
    \           int maior = 0;\n            int indiceMaior = 0;\n\n            for\
    \ (int i = 0; i < listWords.size(); i++) {\n                if (listWords.get(i).length()\
    \ > maior) {\n                    maior = listWords.get(i).length();\n       \
    \             indiceMaior = i;\n                }\n            }\n           \
    \ System.out.printf(\n                    \"The longest word: %s (%d time(s),\
    \ %d%%).\\n\",\n                    listWords.get(indiceMaior),\n            \
    \        Collections.frequency(listWords, listWords.get(indiceMaior)),\n     \
    \               100 * Collections.frequency(listWords, listWords.get(indiceMaior))\
    \ / listWords.size()\n            );\n        }\n    }\n}"
  learner_created: false
- name: test/common/SortingToolStage3Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*
    import kotlin.math.roundToInt

    class SortingToolStage3Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage1Tests() + stage2Tests() + stage3Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "-sortIntegers" in clue.args -> checkNatural(
                        parseLongTokens(clue.consoleInput),
                        ::parseLongTokens,
                        clue,
                        reply
                )

                "long" in clue.args -> checkForLong(clue, reply)
                "word" in clue.args -> checkForWord(clue, reply)
                "line" in clue.args -> checkForLine(clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage1Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   33 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true
                ),
                createTest("1 2 2 3 4 5 5", true),
                createTest("1 1 2 2 3 4 4 4", false)
        )
    }


    fun stage2Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "word"
                ),
                createTest(
                        """abcc de a""".trimMargin(),
                        false,
                        "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "line"
                ),
                createTest(
                        """
                    |1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line"
                )
        )
    }


    fun stage3Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "word", "-sortIntegers"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortIntegers"
                ),
                createTest(
                        """
                    |1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortIntegers", "-dataType", "line"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun checkForLong(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val regex = """(\d+)\D+(\d+)\D+(\d+)""".toRegex()
        val matchResult = regex.find(reply)
        if (matchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output. Please check if your output contains three numbers\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output.")
            }
        }

        val (totalNumbers, greatestNumber, greatestNumberCount) = matchResult.groupValues.drop(1).map { it.toInt() }

        val scanner = Scanner(clue.consoleInput)

        val actualNumbers = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            actualNumbers.add(scanner.nextInt())
        }

        val actualTotal = actualNumbers.size

        if (actualTotal != totalNumbers) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total numbers ($totalNumbers) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total numbers are incorrect.")
            }
        }

        val actualMax = actualNumbers.maxOrNull()

        if (actualMax != greatestNumber) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Greatest number ($greatestNumber) is incorrect. Expected: $actualMax.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Greatest number is incorrect.")
            }
        }

        val actualMaxCount = actualNumbers.count { it == actualMax }

        if (actualMaxCount != greatestNumberCount) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Greatest number times ($greatestNumberCount) are incorrect. Expected: $actualMaxCount.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Greatest number times are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun checkForWord(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val regex = """(\d+)\D+: (.+) \(\D*(\d+)\D+(\d+)\D*\)""".toRegex()
        val matchResult = regex.find(reply)
        if (matchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output.")
            }
        }

        val totalWords = matchResult.groupValues[1].toInt()
        val word = matchResult.groupValues[2]
        val longestWordCount = matchResult.groupValues[3].toInt()
        val longestWordPercentage = matchResult.groupValues[4].toInt()

        val scanner = Scanner(clue.consoleInput)

        val actualWords = mutableListOf<String>()

        while (scanner.hasNext()) {
            actualWords.add(scanner.next())
        }

        val actualTotal = actualWords.size

        if (actualTotal != totalWords) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total words ($totalWords) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total words are incorrect.")
            }
        }

        val actualMax = actualWords.maxByOrNull { it.length }

        if (actualMax != word) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest word ($word) is incorrect. Expected: $actualMax.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest word is incorrect.")
            }
        }

        val actualMaxCount = actualWords.count { it == actualMax }

        if (actualMaxCount != longestWordCount) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest word times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest word times are incorrect.")
            }
        }

        val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()

        if (actualPercentage != longestWordPercentage) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Percentage is incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun checkForLine(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 4) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 4 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 4 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalLines = totalMatchResult.groupValues[1].toInt()
        val line = lines[2]

        val countRegex = """(\d+)\D+(\d+)""".toRegex()
        val countMatchResult = countRegex.find(lines[3])
        if (countMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find two numbers in the last line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find two numbers in the last line of your output.")
            }
        }

        val longestWordCount = countMatchResult.groupValues[1].toInt()
        val longestWordPercentage = countMatchResult.groupValues[2].toInt()

        val actualLines = clue.consoleInput.lines()

        val actualTotal = actualLines.size

        if (actualTotal != totalLines) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total lines ($totalLines) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total lines are incorrect.")
            }
        }

        val actualMax = actualLines.maxByOrNull { it.length }

        if (actualMax != line) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest line ($line) is incorrect. Expected: $actualMax.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest line is incorrect.")
            }
        }

        val actualMaxCount = actualLines.count { it == actualMax }

        if (actualMaxCount != longestWordCount) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest line times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest line times are incorrect.")
            }
        }

        val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()

        if (actualPercentage != longestWordPercentage) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Percentage is incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/241/implement#comment
status: Solved
record: 2
